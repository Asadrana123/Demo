📦 package.json vs package-lock.json (Super Simple Explanation)

🟩 1. package.json
🧠 Think of this like a shopping list you make:
   - You say: "I want React version around 18"
   - It doesn’t care about exact version, just a general range (like ^18.2.0)

📄 Example:
{
  "name": "my-app",
  "version": "1.0.0",
  "dependencies": {
    "react": "^18.2.0"
  }
}

💡 You or your tools write/edit this file.

🧩 It’s used to:
- Describe your project
- List dependencies (libraries your project needs)
- Define scripts (like "npm start")

---

🟦 2. package-lock.json
🔐 Think of this like the actual items you bought from the store, with **exact brand and version**.

📄 Example:
{
  "name": "react",
  "version": "18.2.0",
  "resolved": "https://registry.npmjs.org/react/-/react-18.2.0.tgz"
}

💡 This file is automatically created by npm when you install packages.

🧩 It’s used to:
- Lock the exact version of every package and sub-package
- Make sure your project works the same on **every computer**

---

✅ Simple Analogy:
- `package.json`: I want chips (any brand is okay)
- `package-lock.json`: I bought Lays Classic, 200g, ₹20

---

✔️ package.json → for humans: what you want, semver ranges, scripts, project info.
✔️ package-lock.json → for machines: lock the exact versions so everyone has the same result.

📌 Summary Table:

| Feature             | package.json                | package-lock.json                |
|---------------------|-----------------------------|----------------------------------|
| Who writes it?      | You or CLI (`npm init`)     | Automatically by `npm install`   |
| Editable by user?   | ✅ Yes                      | ❌ No                            |
| Lists dependencies  | ✅ Yes (version range)      | ✅ Yes (exact versions)          |
| Ensures consistency | ❌ No                       | ✅ Yes (same setup everywhere)   |
| Required in Git?    | ✅ Yes                      | ✅ Yes                           |
