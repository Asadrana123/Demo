✅ 3️⃣ Real use case: memoized children
const Child = React.memo(({ onClick }) => {
  console.log("Child rendered");
  return <button onClick={onClick}>Click</button>;
});

function Parent() {
  const [count, setCount] = useState(0);

  const handleClick = () => {
    console.log("Clicked");
  };

  return (
    <>
      <Child onClick={handleClick} />
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </>
  );
}
Problem: Child always re-renders because handleClick is new each render.
const handleClick = useCallback(() => {
  console.log("Clicked");
}, []);
