# Step 2: Writing a Basic Error Boundary in React

- To create an Error Boundary, you need a **class component** with **two special methods**:
  1. static getDerivedStateFromError(error)
     - Updates state to show fallback UI when an error occurs.
  2. componentDidCatch(error, info)
     - Logs the error for monitoring or analytics.

- Basic Example:

import React, { Component } from "react";

class ErrorBoundary extends Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    // Update state to display fallback UI
    return { hasError: true };
  }

  componentDidCatch(error, info) {
    // You can log the error to an external service
    console.error("Error caught by ErrorBoundary:", error, info);
  }

  render() {
    if (this.state.hasError) {
      // Fallback UI
      return <h2>Something went wrong.</h2>;
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

- Usage:

<ErrorBoundary>
  <BuggyComponent />
</ErrorBoundary>

- Summary:
  - Wrap components that might crash with <ErrorBoundary>.
  - If a child throws an error, fallback UI is displayed.
  - The rest of the app remains unaffected.
