REDUX STEP 7: MIDDLEWARE & ASYNC ACTIONS (THUNK)

========================================
WHAT IS MIDDLEWARE?
========================================

DEFINITION:
Middleware runs between dispatching an action and the moment 
it reaches the reducer. It lets you handle side effects
(API calls, logging, analytics) while keeping reducers pure.

WHY USE IT:
- Perform async tasks (fetch, timers) before updating state
- Centralize cross-cutting concerns (logging, error handling)
- Keep reducers pure and predictable
- Inspect/modify actions in transit if needed

COMMON TYPES:
- Logger middleware
- Thunk (async logic)
- Saga/Observable (advanced orchestration)

========================================
ADD THUNK TO STORE
========================================

INSTALL:
npm install redux redux-thunk react-redux

BASIC STORE WITH THUNK:
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';

// Simple reducer
const initialState = { users: [], loading: false, error: null };
function usersReducer(state = initialState, action) {
  switch (action.type) {
    case 'users/fetchStarted':
      return { ...state, loading: true, error: null };
    case 'users/fetchSucceeded':
      return { ...state, loading: false, users: action.payload };
    case 'users/fetchFailed':
      return { ...state, loading: false, error: action.payload };
    default:
      return state;
  }
}

export const store = createStore(usersReducer, applyMiddleware(thunk));

