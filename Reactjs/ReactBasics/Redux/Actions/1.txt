REDUX STEP 4: UNDERSTANDING ACTIONS

========================================
WHAT ARE ACTIONS?
========================================

DEFINITION: Actions are plain JavaScript objects that describe WHAT happened in your app

KEY CHARACTERISTICS:
- Plain JavaScript objects (not functions, not classes)
- Must have a "type" property (string)
- Optional "payload" property for data
- Only way to send data to the Redux store
- Describe events that occurred, not commands

SIMPLE ANALOGY:
Actions are like reports or news headlines:
- "User clicked login button" 
- "API returned user data"
- "Form validation failed"
They describe WHAT happened, not what SHOULD happen.

========================================
ACTION STRUCTURE (FLUX STANDARD ACTION)
========================================

BASIC ACTION:
{
  type: 'ACTION_TYPE'
}

ACTION WITH DATA:
{
  type: 'ADD_TODO',
  payload: {
    id: 1,
    text: 'Learn Redux',
    completed: false
  }
}

COMPLETE ACTION STRUCTURE:
{
  type: 'USER_LOGIN_FAILED',     // Required: describes what happened
  payload: {                     // Optional: the data
    email: 'user@example.com',
    error: 'Invalid password'
  },
  meta: {                        // Optional: additional info
    timestamp: Date.now()
  },
  error: true                    // Optional: indicates this is an error action
}

========================================
ACTION TYPES BEST PRACTICES
========================================

NAMING CONVENTION: 'domain/eventName'
✅ GOOD:
- 'user/loginStarted'
- 'todos/todoAdded' 
- 'cart/itemRemoved'
- 'api/dataFetchSucceeded'

❌ BAD:
- 'LOGIN' (too generic)
- 'SET_DATA' (not descriptive)
- 'UPDATE_STORE' (describes what, not why)

DESCRIPTIVE NAMES:
Actions should read like news headlines - you should understand what happened just by reading the type.

CONSTANTS FOR ACTION TYPES:
// constants/actionTypes.js
export const ADD_TODO = 'todos/todoAdded';
export const REMOVE_TODO = 'todos/todoRemoved';
export const TOGGLE_TODO = 'todos/todoToggled';

// usage
import { ADD_TODO } from '../constants/actionTypes';

const action = {
  type: ADD_TODO,
  payload: { text: 'Learn Redux' }
};

========================================
ACTION CREATORS
========================================

DEFINITION: Functions that create and return action objects

WHY USE ACTION CREATORS?
- Avoid writing action objects manually every time
- Centralize action creation logic
- Add validation or processing before creating action
- Generate unique IDs or timestamps
- Reusability across components

BASIC ACTION CREATOR:
function addTodo(text) {
  return {
    type: 'todos/todoAdded',
    payload: {
      id: Date.now(),
      text: text,
      completed: false
    }
  };
}

// Usage
store.dispatch(addTodo('Learn Redux'));

MULTIPLE ACTION CREATORS:
// User actions
export const loginUser = (email, password) => ({
  type: 'user/loginStarted',
  payload: { email, password }
});

export const loginSuccess = (userData) => ({
  type: 'user/loginSucceeded',
  payload: userData
});

export const loginFailure = (error) => ({
  type: 'user/loginFailed',
  payload: error,
  error: true
});

// Todo actions
export const addTodo = (text) => ({
  type: 'todos/todoAdded',
  payload: {
    id: Math.random().toString(36).substr(2, 9),
    text,
    completed: false,
    createdAt: new Date().toISOString()
  }
});

export const removeTodo = (id) => ({
  type: 'todos/todoRemoved',
  payload: { id }
});

export const toggleTodo = (id) => ({
  type: 'todos/todoToggled',
  payload: { id }
});

========================================
DISPATCHING ACTIONS
========================================

BASIC DISPATCH:
// Direct action object
store.dispatch({
  type: 'INCREMENT',
  payload: { amount: 1 }
});

// Using action creator
store.dispatch(addTodo('Learn Redux'));

WITH REACT-REDUX (PREVIEW):
import { useDispatch } from 'react-redux';
import { addTodo } from './actions/todoActions';

function TodoForm() {
  const dispatch = useDispatch();
  
  const handleSubmit = (text) => {
    dispatch(addTodo(text));
  };
}


