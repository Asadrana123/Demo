REDUX STEP 6: CONNECTING REDUX TO REACT

========================================
OVERVIEW: WHAT WE'RE CONNECTING
========================================

WHAT WE HAVE SO FAR:
✓ Redux Store (holds state)
✓ Actions (describe what happened)
✓ Reducers (update state)

WHAT WE NEED:
- Way for React components to read Redux state
- Way for React components to dispatch actions
- Bridge between Redux world and React world

THE SOLUTION: React-Redux Library
- Provider component (makes store available)
- useSelector hook (read state)
- useDispatch hook (send actions)

========================================
STEP 1: INSTALL REACT-REDUX
========================================

INSTALLATION:
npm install react-redux

WHAT THIS GIVES US:
- Provider component
- useSelector hook
- useDispatch hook  
- connect() function (legacy)

========================================
STEP 2: PROVIDER COMPONENT SETUP
========================================

WHAT IS PROVIDER?
The Provider component makes the Redux store available to ALL components in your React app

WHERE TO USE IT:
Wrap your entire app (or the parts that need Redux) with Provider

BASIC SETUP:
// index.js or main.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import App from './App';

// Your reducer
function counterReducer(state = { count: 0 }, action) {
  switch (action.type) {
    case 'INCREMENT':
      return { count: state.count + 1 };
    case 'DECREMENT':
      return { count: state.count - 1 };
    default:
      return state;
  }
}

// Create store
const store = createStore(counterReducer);

// Wrap App with Provider
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <Provider store={store}>
    <App />
  </Provider>
);

WHY PROVIDER WORKS:
- Uses React Context API internally
- Passes store down through component tree
- Any child component can now access the store
- No need to manually pass store as props

========================================
STEP 3: READING STATE WITH useSelector
========================================

WHAT IS useSelector?
Hook that lets you extract data from Redux store state

BASIC SYNTAX:
const data = useSelector(selectorFunction);

SIMPLE EXAMPLE:
// Counter.js
import React from 'react';
import { useSelector } from 'react-redux';

function Counter() {
  // Extract count from Redux state
  const count = useSelector(state => state.count);
  
  return (
    <div>
      <h2>Count: {count}</h2>
    </div>
  );
}

export default Counter;

ADVANCED EXAMPLES:

1. SELECTING SPECIFIC DATA:
// Select user name only
const userName = useSelector(state => state.user.name);

// Select completed todos only
const completedTodos = useSelector(state => 
  state.todos.filter(todo => todo.completed)
);

// Select cart total
const cartTotal = useSelector(state => 
  state.cart.items.reduce((total, item) => total + item.price, 0)
);

2. MULTIPLE SELECTIONS:
function UserProfile() {
  const user = useSelector(state => state.auth.user);
  const isLoading = useSelector(state => state.auth.isLoading);
  const error = useSelector(state => state.auth.error);
  
  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  
  return <div>Welcome, {user.name}!</div>;
}

3. COMPUTED VALUES:
function TodoStats() {
  const stats = useSelector(state => {
    const todos = state.todos;
    return {
      total: todos.length,
      completed: todos.filter(t => t.completed).length,
      remaining: todos.filter(t => !t.completed).length
    };
  });
  
  return (
    <div>
      <p>Total: {stats.total}</p>
      <p>Completed: {stats.completed}</p>
      <p>Remaining: {stats.remaining}</p>
    </div>
  );
}

========================================
STEP 4: DISPATCHING ACTIONS WITH useDispatch
========================================

WHAT IS useDispatch?
Hook that gives you access to the dispatch function

BASIC SYNTAX:
const dispatch = useDispatch();
dispatch(action);

SIMPLE EXAMPLE:
// Counter.js
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';

function Counter() {
  const count = useSelector(state => state.count);
  const dispatch = useDispatch();
  
  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={() => dispatch({ type: 'INCREMENT' })}>
        +
      </button>
      <button onClick={() => dispatch({ type: 'DECREMENT' })}>
        -
      </button>
    </div>
  );
}

USING ACTION CREATORS:
// actions/counterActions.js
export const increment = () => ({
  type: 'INCREMENT'
});

export const decrement = () => ({
  type: 'DECREMENT'
});

export const incrementByAmount = (amount) => ({
  type: 'INCREMENT_BY_AMOUNT',
  payload: { amount }
});

// Counter.js
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement, incrementByAmount } from './actions/counterActions';

function Counter() {
  const count = useSelector(state => state.count);
  const dispatch = useDispatch();
  
  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={() => dispatch(increment())}>+1</button>
      <button onClick={() => dispatch(decrement())}>-1</button>
      <button onClick={() => dispatch(incrementByAmount(5))}>+5</button>
    </div>
  );
}


========================================
NEXT: Step 7 - Redux Middleware & Async Actions
========================================
