## 1. What is a Thunk?
- A **thunk** is a function returned from an action creator instead of a plain action object.
- Allows **async operations** (API calls, timers, etc.) in Redux.
- Inside the thunk, you can **manually dispatch plain actions** when async work is done.

Example:
```js
const fetchUser = (id) => {
  return async (dispatch) => {
    const data = await fetch(`/api/users/${id}`).then(res => res.json());
    dispatch({ type: "FETCH_USER_SUCCESS", payload: data });
  };
};
2. Why can’t we do API fetching inside reducers?
Reducers must be pure functions:

No async operations, API calls, random numbers, or side effects.

Output must depend only on input state + action.

Async operations in reducers break predictability and Redux DevTools functionality.

3. Why can’t we handle async in normal action creators without Thunk?
Redux expects plain object actions with a type.
Async calls return a Promise, not actual data → reducers get a Promise instead of real data.
Redux cannot wait for async code in normal action creators.

4. Why not just use await in action creators?
Using async/await alone returns a Promise, not a plain object.

Redux cannot handle Promises by default.

Middleware like redux-thunk is required to execute the function and then dispatch plain actions.

5. Who executes the thunk and when?
The thunk function is executed by redux-thunk middleware.

Execution happens when you dispatch the thunk:


store.dispatch(fetchUser(1));
Inside the thunk, you perform async work and dispatch normal actions.

6. Where is the middleware?
Middleware sits between dispatch and reducers.

Applied when creating the store:


import { createStore, applyMiddleware } from "redux";
import thunk from "redux-thunk";
import rootReducer from "./reducers";

const store = createStore(rootReducer, applyMiddleware(thunk));
Middleware intercepts actions before reducers.

7. How to dispatch thunks
Outside React: store.dispatch(fetchUser(1))

Inside React component (with react-redux):


import { useDispatch } from "react-redux";
const dispatch = useDispatch();
dispatch(fetchUser(1));
Redux-thunk ensures the thunk function runs and dispatches plain actions.



