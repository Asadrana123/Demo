What type of controls does Webpack give us?

1. Entry Control
   Tells Webpack where to start bundling the app.
   Example:
   entry: './src/index.js'

2. Output Control
   Controls the name and location of the final bundled file.
   Example:
   output: {
     filename: 'bundle.js',
     path:path.resolve(__dirname, 'dist')
   }

3. Loaders (File Handling Control)
   Tells Webpack how to handle files like .css, .jsx, .ts, images, etc.
   Example:
   module: {
     rules: [
       {
         test: /\.css$/,
         use: ['style-loader', 'css-loader']
       }
     ]
   }
Details:
- "test": A regular expression to match file types. Here, /\.css$/ means "all .css files".
- "use": An array of loaders to handle those files.
   → 'css-loader' reads the CSS file and turns it into JavaScript.
   → 'style-loader' takes that CSS and injects it into the <style> tag in the HTML page.
   
4. Plugins (Extra Functionality)
   Add extra features like HTML generation, minification, cleaning folders, etc.
   Example:
   plugins: [
     new HtmlWebpackPlugin({ template: './index.html' })
   ]

5. Mode Control
   Tells Webpack whether to optimize for development or production.
   Example:
   mode: 'development' // or 'production'

6. Dev Server Control
   Configures the local development server for hot reload, port, etc.
   Example:
   devServer: {
     port: 3000,
     hot: true,
     open: true
   }

Summary:
Webpack gives full control over how your app is built: starting point (entry), output location, 
handling different file types (loaders), adding extra features (plugins), development or production mode, and local dev server behavior.
