CSS GRID LAYOUT – COMPLETE REFERENCE

/* WHAT IS CSS GRID? */
→ A 2-dimensional layout system for building rows and columns.
→ Lets you align items precisely across both horizontal and vertical axes.

----------------------------------------------------------
🌐 SETTING UP A GRID CONTAINER
----------------------------------------------------------
display: grid;
→ Turns an element into a grid container.

grid-template-columns: 
→ Defines the number and width of columns.
→ Example: grid-template-columns: 1fr 2fr 1fr;

grid-template-rows: 
→ Defines the number and height of rows.
→ Example: grid-template-rows: 100px auto 1fr;

gap:
→ Sets spacing between grid items (both rows and columns).
→ Example: gap: 20px; or row-gap: 10px; column-gap: 20px;

----------------------------------------------------------
📐 GRID TRACKS (ROWS & COLUMNS)
----------------------------------------------------------
grid-auto-rows:
→ Sets the height of implicitly created rows.
→ Example: grid-auto-rows: 100px;

grid-auto-columns:
→ Sets the width of implicitly created columns.
→ Example: grid-auto-columns: 150px;

grid-auto-flow:
→ Controls how items are placed (by row or column).
→ Values: row (default) | column | dense
→ Example: grid-auto-flow: column dense;

----------------------------------------------------------
🎯 PLACING ITEMS ON THE GRID (CHILD ELEMENTS)
----------------------------------------------------------
grid-column-start / grid-column-end:
→ Controls where the item starts/ends horizontally.
→ Example: grid-column-start: 2; grid-column-end: 4;

grid-row-start / grid-row-end:
→ Controls where the item starts/ends vertically.
→ Example: grid-row-start: 1; grid-row-end: 3;

grid-column:
→ Shorthand for start / end. Example: grid-column: 2 / 4;

grid-row:
→ Shorthand for start / end. Example: grid-row: 1 / span 2;

----------------------------------------------------------
📦 GRID ITEM SIZING
----------------------------------------------------------
align-self:
→ Aligns individual item vertically (cross axis).
→ Values: start | end | center | stretch (default)

justify-self:
→ Aligns individual item horizontally (main axis).
→ Values: start | end | center | stretch (default)

place-self:
→ Shorthand: align-self + justify-self
→ Example: place-self: center end;

----------------------------------------------------------
📏 ALIGNING ENTIRE GRID
----------------------------------------------------------
align-items:
→ Aligns all items vertically within their grid area.
→ Values: start | end | center | stretch

justify-items:
→ Aligns all items horizontally within their grid area.
→ Values: start | end | center | stretch

place-items:
→ Shorthand: align-items + justify-items
→ Example: place-items: center;

align-content:
→ Aligns the grid tracks (rows) vertically inside the container.
→ Use when grid is smaller than container.

justify-content:
→ Aligns the grid tracks (columns) horizontally inside the container.
→ Use when grid is smaller than container.

place-content:
→ Shorthand: align-content + justify-content

----------------------------------------------------------
📌 NAMED GRID AREAS (OPTIONAL)
----------------------------------------------------------
grid-template-areas:
→ Define named areas to place items easily.
→ Example:
  grid-template-areas:
    "header header"
    "sidebar main"
    "footer footer";

grid-area:
→ Assign a grid item to a named area.
→ Example: grid-area: header;

----------------------------------------------------------
🧮 FRACTIONAL UNITS & FUNCTIONS
----------------------------------------------------------
fr: 
→ Fractional unit for free space. Example: 1fr 2fr

repeat():
→ Repeat a pattern. Example: repeat(3, 1fr)

minmax():
→ Set min and max size. Example: minmax(100px, 1fr)

auto-fill / auto-fit:
→ Automatically fill rows/columns. 
→ Example: repeat(auto-fit, minmax(200px, 1fr))

----------------------------------------------------------
🧪 EXAMPLE:
----------------------------------------------------------
.container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: auto;
  gap: 20px;
}

.item1 {
  grid-column: 1 / 3;
  grid-row: 1 / span 2;
}
