ðŸŽ¯ CSS ANIMATION â€“ COMPLETE GUIDE

CSS Animations allow elements to change styles over time without using JavaScript.

ðŸ”¸ 1. Basic Structure:
---------------------------------------------------
To animate an element, you define two things:
- A `@keyframes` rule (defines the animation)
- CSS properties on the element (to apply the animation)

ðŸ“Œ Example:

@keyframes slideIn {
  from {
    transform: translateX(-100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

.element {
  animation-name: slideIn;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  animation-delay: 0.2s;
  animation-iteration-count: 1;
  animation-direction: normal;
  animation-fill-mode: forwards;
}

ðŸ”¸ 2. ANIMATION PROPERTIES EXPLAINED:
---------------------------------------------------

ðŸŸ¡ animation-name:
- Specifies the name of the `@keyframes` to run.
- Example: `animation-name: fadeIn;`

ðŸŸ¡ animation-duration:
- Sets how long the animation takes to complete 1 cycle.
- Values: `2s`, `500ms`, etc.
- Example: `animation-duration: 1s;`

ðŸŸ¡ animation-timing-function:
- Defines the speed curve of the animation.
- Values:
  - `ease` (default) â€“ starts slow, speeds up, ends slow
  - `linear` â€“ same speed throughout
  - `ease-in` â€“ starts slow
  - `ease-out` â€“ ends slow
  - `ease-in-out` â€“ slow at both ends
  - `steps(n)` â€“ jumps in `n` steps
  - `cubic-bezier(...)` â€“ custom curve
- Example: `animation-timing-function: ease-in-out;`


More Values 
âœ… step-start
Jumps to the end immediately (value = 100%) at the start of the animation.

No smooth transition.
Feels like it happens instantly.
ðŸŸ¦ Example use: dropdowns or instant UI changes.
âœ… step-end
Stays at the start value for the entire duration.
Jumps to the end only at the last moment.
Looks like nothing happens, then suddenly switches.



ðŸŸ¡ animation-delay:
- Sets how long to wait before the animation starts.
- Values: `1s`, `500ms`, etc.
- Example: `animation-delay: 0.5s;`

ðŸŸ¡ animation-iteration-count:
- Specifies how many times the animation should repeat.
- Values:
  - `1`, `2`, `3`... 
  - `infinite` (loop forever)
- Example: `animation-iteration-count: infinite;`

ðŸŸ¡ animation-direction:
- Controls the direction of the animation.
- Values:
  - `normal` â€“ runs from start to end
  - `reverse` â€“ runs from end to start
  - `alternate` â€“ runs forward then backward
  - `alternate-reverse` â€“ backward then forward
- Example: `animation-direction: alternate;`

ðŸŸ¡ animation-fill-mode:
- Determines the styles applied **before and after** the animation.
- Values:
  - `none` â€“ default, element reverts to original styles
  - `forwards` â€“ keeps final keyframe style
  - `backwards` â€“ applies initial keyframe style before animation starts
  - `both` â€“ combination of forwards and backwards
- Example: `animation-fill-mode: forwards;`

ðŸŸ¡ animation-play-state:
- Allows you to pause or resume the animation.
- Values: `running`, `paused`
- Example: `animation-play-state: paused;`

ðŸ”¸ 3. Shorthand Property:
---------------------------------------------------
All animation properties can be combined using a shorthand:

ðŸ“Œ Syntax:
animation: [name] [duration] [timing-function] [delay] [iteration-count] [direction] [fill-mode] [play-state];

ðŸ“Œ Example:
```css
animation: slideIn 1s ease-out 0.3s 1 normal forwards running;
