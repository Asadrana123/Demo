Array :- In JavaScript, arrays are sparse — meaning they can have “holes”
        (i.e., undefined elements in between).

sparse array :- A sparse array is an array where some indexes are missing — meaning there are holes 
between elements. These holes are not undefined values — they are truly missing entries in the array.

const arr = [1, 2, 3];

const arr = {
  0: 1,
  1: 2,
  2: 3,
  length: 3
};

if we do arr[5] then it will give us undefined

JavaScript Is Saying:
"I don’t care if you access an index I’ve never seen before. 
I’ll just give you undefined and move on."

:-[6] * 2 → "6" * 2 → 12
:-If [6] was [6, 7], it would become "6,7" * 2 → NaN.

Length of array:-The length of the array is determined by the highest index in the array, not the number 
of defined elements.

for each:-.forEach() does not iterate over empty slots. It skips over them, 
unlike other methods such as map(), which leave an empty slot in the result.

:-Array indices must be non-negative integers (i.e., 0, 1, 2,...).

Negative Indices in slice() and splice()
🟢 slice(start, end):
Negative values count from the end of the array.

Example:
If array = [5, 10, 15, 20, 25, 30]
then:
slice(-4, -1) → start from 4th-last (which is 15) and go up to but not including the last one (which is 30), 
so result is:

👉 sliced = [15, 20, 25]

spliced:-return the removed elements and make changes in origininal array 
syntax:-arr.splice(start,number of elements,...elements to add);
