The 'this' Keyword in JavaScript - Complete Guide


1. Global Space
Rule: In global space, this always refers to the global object.

console.log(this); // Window object (in browser)
Key Points:
Global object varies by JavaScript runtime:
Browser: window object
Node.js: global object
Other runtimes: Can be different

2. Inside Functions
Rule: The value of this inside functions depends on strict mode vs non-strict mode.

Non-Strict Mode
javascript
function x() {
    console.log(this); // Window object
}
x();

Strict Mode
javascript
"use strict";
function x() {
    console.log(this); // undefined
}
x();

This Substitution
Important Concept: In non-strict mode only, if the value of this is undefined or null, 
JavaScript replaces it with the global object.
function printThis() {
    console.log(this);
}

printThis.call(undefined); // window (non-strict)
printThis.call(null);      // window (non-strict)


3. How Function is Called Matters
Rule: The value of this depends on how the function is called.

"use strict";
function x() {
    console.log(this);
}

x(); // undefined (called without reference)
window.x(); // Window object (called with reference)


4. Inside Object Methods
Rule: When this is inside a method, it refers to the object that contains the method.
const obj = {
    a: 10,
    x: function() {
        console.log(this); // obj object
        console.log(this.a); // 10
    }
};
obj.x(); // 'this' refers to obj



5. Call, Apply, and Bind Methods
Rule: These methods allow you to override the value of this and share methods between objects.

const student = {
    name: "Akshay",
    printName: function() {
        console.log(this.name);
    }
};

const student2 = {
    name: "Deepika"
};

// Using call to share method
student.printName(); // "Akshay"
student.printName.call(student2); // "Deepika"


