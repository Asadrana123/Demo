6. Inside Arrow Functions
Rule: Arrow functions do not have their own this binding. 
They take the value from their enclosing lexical context.

Basic Example
javascript
const obj = {
    a: 10,
    x: () => {
        console.log(this); // Window object (global context)
    }
};
obj.x(); // 'this' is NOT obj, it's Window


Nested Example (Tricky)
javascript
const obj2 = {
    a: 20,
    x: function() {
        // Arrow function inside regular function
        const y = () => {
            console.log(this); // obj2 object
        };
        y();
    }
};

obj2.x(); // 'this' inside arrow function equals 'this' of enclosing function
Key Concept: Arrow function behaves as if it doesn't exist -
it takes this value from where it's lexically enclosed.

7. Inside DOM Elements
Rule: In DOM event handlers, this refers to the HTML element that triggered the event.


<button onclick="alert(this)">Click me</button>
<!-- 'this' refers to the button element -->

<button onclick="alert(this.tagName)">Click me</button>
<!-- Prints: "BUTTON" -->



Key Interview Points
this in global space = global object
this in functions depends on strict/non-strict mode
This substitution happens only in non-strict mode
Function call method determines this value
Arrow functions inherit this from enclosing scope
Object methods have this as the containing object
call/apply/bind can override this value
DOM elements have this as the HTML element

Important Definitions
Method: A function inside an object
Enclosing Lexical Context: Where the arrow function is written/enclosed in the code
This Substitution: JavaScript replacing undefined/null this with global object (non-strict mode only)
Global Object: The top-level object in JavaScript runtime (Window in browser, Global in Node.js)