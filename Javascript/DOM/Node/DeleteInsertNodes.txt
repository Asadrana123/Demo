// üü¢ DOM Children Manipulation ‚Äì Quick Summary

// 1Ô∏è‚É£ Remove all children

// Using while loop
while(parent.firstChild) {
  parent.removeChild(parent.firstChild);
}
// Safe for all nodes; removes all children; event listeners on children are removed.

// Using innerHTML
parent.innerHTML = '';
// Quick and simple; removes all children; event listeners on children are removed.

// Using replaceChildren
parent.replaceChildren();
// Modern, clean, and efficient; removes all children.

// 2Ô∏è‚É£ Replace children with new ones

// Using replaceChildren
parent.replaceChildren(newChild1, newChild2);
// Removes all old children and inserts new ones; supports multiple new nodes; modern and clean.

// Using innerHTML
parent.innerHTML = '<div>New Child 1</div><div>New Child 2</div>';
// Quick for static HTML; event listeners on old children are removed.

// Using while loop + appendChild
while(parent.firstChild) {
  parent.removeChild(parent.firstChild);
}
parent.appendChild(newChild1);
parent.appendChild(newChild2);
// Manual approach; full control; works everywhere.

// 3Ô∏è‚É£ Replace a single child

// Using replaceChild
parent.replaceChild(newChild, oldChild);
// Replaces only one specific child; old child removed from DOM; event listeners on removed child are lost.

// 4Ô∏è‚É£ Key Rules of Thumb

// 1. Remove everything: use replaceChildren() or while(firstChild)
// 2. Replace all with new nodes: use replaceChildren(new1, new2)
// 3. Replace only one child: use replaceChild(new, old)
// 4. innerHTML='' works but removes all event listeners and is less flexible for dynamic nodes
// 5. replaceChildren() is modern, clean, and efficient; recommended for most cases
