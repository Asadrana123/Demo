// 🟢 Complete Ways to Remove Children in DOM

let parent = document.getElementById("parent");

// 1️⃣ Using while loop + removeChild (classic, safe)
while(parent.firstChild) {
  parent.removeChild(parent.firstChild);
}


// 2️⃣ Using innerHTML 
parent.innerHTML = '';
Takes a string, parses it into new DOM nodes.
Destroys all old child nodes.
Recreates everything from scratch, including text, elements, and attributes.
Loses all event listeners and state.


// 3️⃣ Using replaceChildren() (modern, clean, efficient)
parent.replaceChildren();
Operates directly on existing DOM nodes.
Doesn’t parse strings or recreate nodes unnecessarily.
Can reuse nodes and their attached event listeners.



// 4️⃣ Using replaceChild (replace a specific child)
let oldChild = parent.querySelector('.old');
let newChild = document.createElement('div');
parent.replaceChild(newChild, oldChild);



// 5️⃣ Using remove() on each child individually (modern)
Array.from(parent.children).forEach(child => child.remove());


// 6️⃣ Using textContent (removes all child nodes, including text nodes)
parent.textContent = '';



// ✅ Key Notes:
// - while + removeChild → works in all browsers, safe for dynamic content
// - innerHTML → quick but event listeners on children are lost
// - replaceChildren → recommended for modern code
// - remove() → simple, works for Node elements
// - textContent → only if you want to clear everything, including text nodes
// - replaceChild → use when replacing a specific child only




