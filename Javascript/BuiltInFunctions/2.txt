// ✅ Array Functions
[1,2,3].push(4);                // [1,2,3,4]
[1,2,3].pop();                  // 3, array=[1,2]
[1,2,3].shift();                // 1, array=[2,3]
[1,2,3].unshift(0);             // [0,1,2,3]
[1,2,3].concat([4,5]);          // [1,2,3,4,5]
[1,2,3,4].slice(1,3);           // [2,3]
[1,2,3].splice(1,1);            // removes 2 → [1,3]
[1,2,3].indexOf(2);             // 1
[1,2,3].includes(3);            // true
[1,2,3].join("-");              // "1-2-3"
[1,2,3].map(x => x*2);          // [2,4,6]
[1,2,3].filter(x => x>1);       // [2,3]
[1,2,3].reduce((a,b)=>a+b,0);   // 6
[1,2,3].forEach(x=>console.log(x)); // 1 2 3
[5,1,4].sort();                 // [1,4,5] (string sort)
[5,1,4].sort((a,b)=>a-b);       // [1,4,5] (numeric sort)
[1,2,3].find(x=>x>1);           // 2
[1,2,3].every(x=>x>0);          // true
[1,2,3].some(x=>x>2);           // true
[1,2,3].flat();                 // [1,2,3]
[[1,2],[3,4]].flat();           // [1,2,3,4] -- will work only upper layer
[[1,[1,2]],[3,4]].flat(2);      // [1,2,3,4] -- can give depth for how much it will flat

// ✅ Object Functions
Object.keys({a:1,b:2});         // ["a","b"]
Object.values({a:1,b:2});       // [1,2]
Object.entries({a:1,b:2});      // [["a",1],["b",2]]
Object.assign({}, {a:1}, {b:2}); // {a:1, b:2}
Object.freeze(obj);             // make object immutable
Object.seal(obj);               // allow changes but no new props
Object.hasOwn(obj,"a");         // true

