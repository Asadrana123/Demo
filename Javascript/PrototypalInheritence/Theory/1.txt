What is a Prototype?
In JavaScript, every object has an internal property called [[Prototype]], which refers 
to another object.

You can access it using . __proto__ on an object, though Object.getPrototypeOf() is the standard method.

The prototype object provides shared methods and properties for all instances created via a 
constructor function.

2. What is the Prototype Chain?
Searching for a property: When accessing a property, JavaScript first looks on the object itself. 
If not found, it checks the object's prototype, and keeps following up the chain 
(prototypes of prototypes) until it reaches null (the root).

Example:
const o = {
  a: 1,
  b: 2,
  __proto__: {
    b: 3,
    c: 4,
  },
};
console.log(o.c); // 4  
console.log(o.d); // undefined (property not found)
This is called the prototype chain.

3. Prototypal Inheritance
Objects in JavaScript inherit properties and methods from their prototype.
Constructor functions have a .prototype property used to attach methods:

function Animal(name) {
  this.name = name;
}
Animal.prototype.speak = function() {
  return `${this.name} makes a noise.`;
}
const dog = new Animal('Dog');
dog.speak(); // "Dog makes a noise."
Each object created via a constructor function has its internal prototype (__proto__)
pointing to the constructorâ€™s .prototype.



ABCD