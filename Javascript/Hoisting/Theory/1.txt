What is Hoisting in JavaScript?
Hoisting is a JavaScript mechanism where variables and function declarations are moved (or "hoisted") 
to the top of their containing scope before the code execution phase.

This means variables and functions can be accessed before their actual line of declaration in the code, 
but with important differences depending on how they are declared.

Memory Allocation Phase in Execution Context
During the creation phase of execution context:

Memory is allocated for all variables and functions.
Variables are initialized with undefined placeholder initially.
Function declarations are fully loaded into memory with their bodies.

Hoisting Behavior with Variables

Var Variables
Variables declared with var are hoisted.
Memory is allocated, and value is undefined until actual assignment.
Example:
console.log(x); // undefined
var x = 7;
console.log(x); // 7
You can safely access var variables before declaration but value is undefined until assignment.

Let and Const Variables
Variables declared with let and const are hoisted but not initialized.
They reside in the Temporal Dead Zone (TDZ) from the start of the block until the declaration line.
Accessing them before declaration causes ReferenceError.

Example:
console.log(a); // ReferenceError
let a = 5;
Hoisting Behavior with Functions

Function Declarations
Fully hoisted along with their body.
Can be invoked before their declaration line.

Example:
foo(); // works fine, prints 'foo called'
function foo() {
  console.log('foo called');
}

Function Expressions and Arrow Functions
If declared using var, the variable is hoisted as undefined.
The function assignment happens only during execution phase.
Thus, calling them before assignment causes errors or undefined errors.

Example:
foo(); // TypeError: foo is not a function
var foo = function() {
  console.log('foo called');
};

Same is true for arrow functions
foo(); // TypeError: foo is not a function
var foo = () => {
  console.log('foo called');
};

Difference Between undefined and not defined

undefined: Variable declared but not yet assigned a value.
not defined: Variable was never declared in the current scope.

Real Memory Snapshot Example
Using browser debugger or devtools, variables with var appear in memory with undefined.

Function declarations have their full code loaded in memory during creation phase.

Summary for Interviews
Hoisting isn't simply "moving code to the top".
It's the two-phase process of memory allocation (creation) and execution.
Functions declared with function keyword are fully hoisted.
Variables with var hoist as undefined.
Variables with let/const are hoisted but in TDZ and inaccessible until initialized.
Arrow functions and function expressions behave like variables regarding hoisting.

