JavaScript is synchronous, single-threaded language with just ONE call stack and can 
do ONE thing at a time.

Key Concepts Overview
1. JavaScript Engine & Call Stack
Call stack executes any execution context which enters in it
Call stack has no timer JavaScript has only 1 call stack present 
inside the JavaScript engine

2. Browser Superpowers (Web APIs)
None of these are part of JavaScript! These are extra superpowers that browser provides:

setTimeout()
DOM APIs
fetch()
localStorage
console (yes, even console.log is not JS!)
location
And many more
JavaScript gets access to these powers via the browser through the global object window:

javascript
window.console.log() // But since window is in global scope, we can access without writing it
console.log() // Same as above

3. setTimeout Explained with Examples
Basic setTimeout Example:
console.log("start");
setTimeout(function cb() {
    console.log("timer");
}, 5000);
console.log("end");

// Output: start end timer (after 5 seconds)
What happens behind the scenes:
console.log("start") - executed immediately
setTimeout() - callback registered in Web API environment, timer starts
console.log("end") - executed immediately
After 5000ms, callback moves to callback queue
Event loop pushes callback to call stack when it's empty
console.log("timer") executes

Complex setTimeout Example:
setTimeout(function () {
    console.log("timer");
}, 5000);

function x(y) {
    console.log("x");
    y();
}

x(function y() {
    console.log("y");
});

// Output: x y timer (after 5 seconds)
4. Event Listeners & Closures
Basic Event Listener:

<button id="clickMe">Click Me!</button>
document.getElementById("clickMe").addEventListener("click", function xyz() {
    console.log("Button clicked");
});

