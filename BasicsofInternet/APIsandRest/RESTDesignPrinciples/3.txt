5. ðŸ§¼ Cacheability
REST encourages caching.

Responses should say if they can be cached, and for how long.

For example:

If the product list doesnâ€™t change often, allow the browser to cache it.

Use HTTP headers like Cache-Control.

ðŸ“Œ Why?
Reduces server load and makes apps faster.

6. ðŸ”„ Layered System
The client doesnâ€™t need to know whether itâ€™s talking directly to the server or through something else (like a proxy, gateway, or CDN).

ðŸ“Œ Example:
When you send a request to api.example.com, it might go through:

A load balancer

A CDN

An API gateway

And finally reach the backend server

But you donâ€™t need to know that. It should just work.

ðŸ§ª Optional: Code on Demand
This is the only optional principle.

It means the server can send code (like JavaScript) to the client to execute.
Not used often in REST APIs â€” more of a web browser thing.

