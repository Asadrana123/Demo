🧠 The 6 RESTful Principles (also called constraints)
Let’s break them down one by one, in plain English.

1. 🔗 Uniform Interface
✅ This is the core idea of REST.

It means:

“All your API endpoints should look and behave in a consistent way.”

This includes:

Use URLs to represent resources:
/users, /products/123, /orders/567/items

Use HTTP methods properly:

GET → read data

POST → create new data

PUT → replace data

PATCH → update part of the data

DELETE → remove data

Return proper status codes: 200, 201, 404, 400, etc.

Use JSON (or other formats) to represent data consistently.

📌 Why is this important?
Because if the API is predictable, it’s easy to learn and use.

2. 📦 Resources (Nouns, not Verbs)
In REST, we treat everything as a resource.

A resource is something you can create, read, update, or delete — like:

users

posts

comments

products

So your endpoints should look like:

✅ GET /users/1 — get user 1

✅ POST /users — create user

✅ DELETE /users/1 — delete user

❌ Not like: GET /getUser, POST /addUser — these are verb-based and not RESTful.

3. 🌐 Statelessness
Every request must contain all the information needed to process it.

✅ The server should not "remember" previous requests.
Each request is treated as independent.

This means:

No server-side session storage

If you're logged in, your request should include the token every time (usually in headers)

📌 Why?
This makes your API scalable — any server can handle any request, no memory needed.

4. 💾 Client–Server Architecture
The frontend (client) and backend (server) should be separate.

Client: handles UI and user interaction

Server: handles data storage, business logic

📌 Why?
This separation allows each side to evolve independently. You can redesign your frontend without touching backend logic, and vice versa.

5. 🧼 Cacheability
REST encourages caching.

Responses should say if they can be cached, and for how long.

For example:

If the product list doesn’t change often, allow the browser to cache it.

Use HTTP headers like Cache-Control.

📌 Why?
Reduces server load and makes apps faster.

6. 🔄 Layered System
The client doesn’t need to know whether it’s talking directly to the server or through something else (like a proxy, gateway, or CDN).

📌 Example:
When you send a request to api.example.com, it might go through:

A load balancer

A CDN

An API gateway

And finally reach the backend server

But you don’t need to know that. It should just work.

🧪 Optional: Code on Demand
This is the only optional principle.

It means the server can send code (like JavaScript) to the client to execute.
Not used often in REST APIs — more of a web browser thing.

