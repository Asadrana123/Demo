What is a Load Balancer?
A Load Balancer is like a traffic manager that distributes 
incoming requests across multiple servers, so no single server gets 
overloaded and everything runs smoothly.

It helps with:

⚖️ Balanced performance

🚀 Faster response times

💥 Zero downtime (if one server crashes)

🔄 Real-world Analogy:
Imagine a restaurant with 4 cashiers 🍔

Customers (requests) enter the restaurant (your app).

If everyone lines up at 1 counter, it becomes slow 🐌.

So, the manager (load balancer) sends customers to the least busy counter.

That’s exactly what a load balancer does — distributes traffic to multiple servers.

✅ Where it's used in a web app?
Here’s a basic flow:

txt
Copy
Edit
         User (Browser)
              ↓
        [ Load Balancer ]
          ↙      ↓      ↘
   Server 1   Server 2   Server 3
Your React app (frontend) calls your backend API → 
the load balancer decides which server should handle it.

💡 Why Do We Need a Load Balancer?
Problem	Load Balancer Fix
Too many users overload one server	Distributes traffic to all servers
A server crashes	Sends traffic to other working servers
Some servers are slow	Routes to the fastest/healthiest one
Need to scale apps	Helps horizontal scaling

🚦 Types of Load Balancing Strategies
Strategy	How It Works
Round Robin	Send to each server one after another
Least Connections	Send to server with the fewest users now
IP Hash	Send the same user (IP) to same server
Weighted	Send more traffic to stronger servers

🔧 Tools/Services That Act as Load Balancers
Tool / Service	Use Case
NGINX	Web server + load balancer
HAProxy	High-performance load balancing
AWS ELB / ALB	Load balancer on Amazon Cloud
Cloudflare	CDN + Global load balancing
Kubernetes Service	Load balances traffic to pods

🧠 Interview-Ready One-Liner:
“A load balancer sits between users and backend servers, distributing traffic efficiently across servers to ensure speed, stability, and fault tolerance.”

✨ Bonus: Load Balancer vs Gateway?
Feature	Gateway	Load Balancer
Purpose	Connects/bridges systems or networks	Distributes load across servers
Example	API Gateway, Payment Gateway	NGINX load balancing multiple servers
Concerned with	Protocols, routing, security	Traffic volume, performance