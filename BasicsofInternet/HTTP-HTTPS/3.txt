What is 302 Found?
Meaning:

“The thing you’re looking for is temporarily at a different place — but come back here next time.”

🔑 Key idea:
Temporary redirect.
The original URL is still valid — the new location is just a temporary detour.

👶 Easy Real-World Example
Imagine:

You visit a clothing website:
https://www.fashionstore.com/summer-sale

But today, their sale page is under maintenance. So the server says:

“Hey, instead of this, temporarily go to /sale-coming-soon.”

But tomorrow, the sale page might be back. So the server sends a 302 status code with this response:

HTTP/1.1 302 Found  
Location: /sale-coming-soon
Your browser will then go to https://www.fashionstore.com/sale-coming-soon — 
but it does not update the original URL in your bookmarks.


Feature rollout (redirect to different versions of a page)

Temporarily moving users away from a broken or updating page

⚠️ Drawback (Important)
Older browsers (and even some tools) might change the HTTP method to GET.

Example:
You send POST /login, server replies with:


302 Found  
Location: /new-login
But the browser might re-send it as:


GET /new-login
Which can break your form login!



1. Who is changing the method from POST to GET?
➡️ The browser (client) is doing this.

Not the server. Not HTTP itself. The browser sees 302 Found and says:

“Oh, I should redirect! But I don’t know if I should keep using POST, so I’ll be safe and 
switch to GET.”

⚠️ This behavior is based on how browsers were historically implemented. And technically
 allowed by the HTTP spec for 302.



 What is a “Spec”?
A spec (short for specification) is the official rulebook that defines how 
a protocol or technology should work.

HTTP Spec = 📜 Official document that defines how HTTP works

What does a 302 mean?
Should the client keep the method?
What headers are allowed?
How should caching work?
What does Content-Type mean?


Without a spec:

Chrome, Firefox, Postman, Node.js, Apache, Nginx — all would behave differently 😵‍💫