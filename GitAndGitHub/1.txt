Introduction
Git is an open-source software used for version control, a must-have skill for every developer, 
regardless of language or domain.

GitHub is an online service to host git repositories; companies may use alternatives like GitLab 
or Bitbucket.

The course focuses first on understanding Git concepts, not just memorizing commands. 
The aim is to be comfortable with the internals, workflows, and error investigations.

Terminology & Philosophy
Version Control System (VCS): Like checkpointing in games—save points in your project. Enables 
rollbacks to working states.

Repository (Repo): A tracked folder (directory) by Git. Multiple repos can exist on a system; only 
some folders are tracked.

Commit: A checkpoint—saves project state at a moment in time.

Working Directory: Where current work happens (tracked/untracked).

Staging Area: Where changes are prepared ("staged") before committing.

Hidden .git folder: Created when initializing a repo—contains the database tracking all history 
and changes.

Branch: Parallel versions of codebase (default is “master” or “main”; can be “dev”, “trunk” or others).

Getting Started & Setup
Always start by visiting official docs if stuck or requiring further visuals or sample commands.

Tools & Editor
Recommended: VS Code for visual convenience.

Terminal preference: On Windows, use "git bash" for best compatibility 
(not Windows CMD/PowerShell, as some commands may differ). 
Mac users can use Terminal; Warp suggested as an advanced shell but not mandatory.

Setup Process
Download & Install git (official site).

Set global user details for commits:

bash
git config --global user.email "youremail@example.com"
git config --global user.name "Your Name"
This info is saved in config files and used with every commit, especially 
important when pushing to GitHub or other online services 
(but not strictly required for local only usage).

Verify Configuration

bash
git config --list
Or for repository-specific config:

bash
git config --local --list
(Optional) Set your default editor for 
git commit messages or merges (VS Code, Vim, Nano, etc.).

Initial Workflow
Creating and Tracking Repositories
Initialize a repository:

bash
git init
This creates a hidden folder .git inside the directory.

Check git status:

bash
git status
Provides current tracking info—see if inside a git repo or not.

If not inside a git repo, "not a git repository" error appears, which is safe.

Adding files/folders for tracking:
Only folders where you've done git init are tracked; others are not.
You can practice by creating empty folders (one to track, others to leave untracked).

Branch Naming & Management
Default branch name is “master” (or "main"/"development"/"trunk") but can be changed.

Investigate default branch naming by reading messages during git init;
you can change initial branch like:

bash
git branch -m main
All branch changes, merges, etc., will be covered later.

.git Folder Insights
View the contents (in VS Code: enable hidden files, or in terminal: ls -la inside the repo).

.git folder contains technical files: HEAD, config, objects, refs, info, hooks, etc.

These files are part of git’s database storing all versioned history for the repo.

